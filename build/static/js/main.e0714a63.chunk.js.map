{"version":3,"sources":["components/Header.js","components/TextField.js","components/MainCard.js","App.js","reportWebVitals.js","index.js"],"names":["Header","Title","Themes","dropDownBtnText","getTheme","setTheme","className","color","HeaderTheme","dark","light","blue","type","id","data-bs-toggle","aria-expanded","aria-labelledby","map","theme","onClick","text","toUpperCase","toLowerCase","defaultProps","TextField","buttonText","getAlgorithm","htmlFor","style","textareaStyle","rows","placeholder","buttondivStyle","textareaid","document","getElementById","value","Base64","decode","encode","window","alert","CryptoJS","MD5","SHA1","SHA256","AES","decrypt","toString","enc","Utf8","encrypt","DES","Rabbit","ED","buttonStyle","select","execCommand","background","marginTop","alignItems","margin","border","MainCard","Algorithms","setAlgorithm","useState","innerWidth","screensize","setScreensize","onresize","maincontainerStyleMobileAndTablet","maincontainerStyle","cardTheme","dropdownStyle","algorithm","name","float","width","THEMES","App","body","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e0714a63.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nexport default function Header({ Title, Themes, dropDownBtnText, getTheme, setTheme }) {\r\n\r\n    const changeTheme = (text) => {\r\n        if (text === dropDownBtnText) {\r\n            return\r\n        }\r\n        setTheme(text.toLowerCase());\r\n    }\r\n\r\n    return (\r\n        <nav className={getTheme === Themes[1].color ? HeaderTheme.dark : getTheme === Themes[0].color ? HeaderTheme.light : HeaderTheme.blue}>\r\n            <div className=\"container-fluid\">\r\n                <h4 className=\"navbar-brand\">{Title}</h4>\r\n                <div className=\"dropdown dropstart\">\r\n                    <button className=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton1\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                        {dropDownBtnText}\r\n                    </button>\r\n                    <ul className=\"dropdown-menu dropdown-menu-dark\" aria-labelledby=\"dropdownMenuButton1\">\r\n                        {\r\n                            Themes.map((theme) => (\r\n                                <li key={theme.id}><button onClick={() => {changeTheme(theme.color.toUpperCase())}} className=\"dropdown-item\">{theme.color}</button></li>\r\n                            ))\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nHeader.defaultProps = {\r\n    Title: 'Navbar',\r\n}\r\n\r\nHeader.propTypes = {\r\n    Title: PropTypes.string,\r\n}\r\n\r\nconst HeaderTheme = {\r\n    dark : 'navbar navbar-dark bg-dark',\r\n    light: 'navbar navbar-light bg-light',\r\n    blue: 'navbar navbar-dark bg-primary',\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport { Base64 } from 'js-base64';\r\nimport CryptoJS from 'crypto-js';\r\n\r\nexport default function TextField({ buttonText, getTheme, Themes, getAlgorithm }) {\r\n\r\n    const CopyToClipboard = (textareaid) => {\r\n        document.getElementById(textareaid).select();\r\n        document.execCommand(\"copy\");\r\n    }\r\n\r\n    const ClearTextArea = (textareaid) => {\r\n        document.getElementById(textareaid).value = null;\r\n    }\r\n\r\n    const ED = (textareaid) => {\r\n        let text = document.getElementById(textareaid).value;\r\n        if (getAlgorithm === \"base64\"){\r\n            if (textareaid === \"Decode\" ){\r\n                document.getElementById(\"Encode\").value =  Base64.decode(text)\r\n            }\r\n            else {\r\n                document.getElementById(\"Decode\").value = Base64.encode(text)\r\n            }\r\n        }\r\n        else if (getAlgorithm === \"md5\"){\r\n            if (textareaid === \"Decode\" ){\r\n                window.alert(\"Cannot decode md5 because it's a one way function.\")\r\n            }\r\n            else {\r\n                document.getElementById(\"Decode\").value =  CryptoJS.MD5(text)\r\n            }\r\n        }\r\n        else if (getAlgorithm === \"sha1\"){\r\n            if (textareaid === \"Decode\" ){\r\n                window.alert(\"Cannot decode sha1 because it's a one way function.\")\r\n            }\r\n            else {\r\n                document.getElementById(\"Decode\").value =  CryptoJS.SHA1(text)\r\n            }\r\n        }\r\n        else if (getAlgorithm === \"sha256\"){\r\n            if (textareaid === \"Decode\" ){\r\n                window.alert(\"Cannot decode sha256 because it's a one way function.\")\r\n            }\r\n            else {\r\n                document.getElementById(\"Decode\").value =  CryptoJS.SHA256(text)\r\n            }\r\n        }\r\n        else if (getAlgorithm === \"aes\"){\r\n            if (textareaid === \"Decode\" ){\r\n                document.getElementById(\"Encode\").value =  CryptoJS.AES.decrypt(text, \"\").toString(CryptoJS.enc.Utf8)\r\n            }\r\n            else {\r\n                document.getElementById(\"Decode\").value =  CryptoJS.AES.encrypt(text, \"\").toString()\r\n            }\r\n        }\r\n        else if (getAlgorithm === \"des\"){\r\n            if (textareaid === \"Decode\" ){\r\n                document.getElementById(\"Encode\").value =  CryptoJS.DES.decrypt(text, \"\").toString(CryptoJS.enc.Utf8)\r\n            }\r\n            else {\r\n                document.getElementById(\"Decode\").value =  CryptoJS.DES.encrypt(text, \"\").toString()\r\n            }\r\n        }\r\n        else if (getAlgorithm === \"rabbit\"){\r\n            if (textareaid === \"Decode\" ){\r\n                document.getElementById(\"Encode\").value =  CryptoJS.Rabbit.decrypt(text, \"\").toString(CryptoJS.enc.Utf8)\r\n            }\r\n            else {\r\n                document.getElementById(\"Decode\").value =  CryptoJS.Rabbit.encrypt(text, \"\").toString()\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"form-group\">\r\n            <label htmlFor={buttonText}>Example textarea: </label>\r\n            <textarea style={getTheme === Themes[0].color ? textareaStyle[1] : textareaStyle[0]} className=\"form-control\" id={buttonText} rows=\"8\" placeholder=\"Enter Here\"></textarea>\r\n        </div>\r\n        <div style={buttondivStyle}>\r\n            <button onClick={() => ED(buttonText)} type=\"button\" className=\"btn btn-success\" style={buttonStyle}>{buttonText}</button>\r\n            <button onClick={() => ClearTextArea(buttonText)} type=\"button\" className=\"btn btn-danger\" style={buttonStyle}>Clear</button>\r\n            <button onClick={() => CopyToClipboard(buttonText)} type=\"button\" className=\"btn btn-light\" style={buttonStyle}><i className=\"bi bi-clipboard\"></i> Copy to clipboard</button>\r\n        </div>\r\n        </>\r\n    );\r\n}\r\n\r\nTextField.propTypes = {\r\n    buttonText: PropTypes.string.isRequired,\r\n}\r\n\r\nconst textareaStyle = [\r\n    {\r\n        color: 'white',\r\n        background: '#161a1d', //dark\r\n    },\r\n    {\r\n        color: 'black',\r\n        background: 'white', //light\r\n    }\r\n]\r\n\r\nconst buttondivStyle = {\r\n    marginTop: '10px',\r\n    alignItems: 'center',\r\n}\r\n\r\nconst buttonStyle = {\r\n    margin: '5px',\r\n    border: '1px solid rgba(0,0,0,.125)',\r\n}\r\n","import TextField from './TextField';\r\nimport { useState } from 'react';\r\n\r\nexport default function MainCard({ getTheme, Themes, Algorithms, getAlgorithm, setAlgorithm }) {\r\n\r\n    const [screensize, setScreensize] = useState(window.innerWidth);\r\n    window.onresize = () => setScreensize(window.innerWidth);\r\n\r\n    const DeviceVersion = () => {\r\n        if (screensize <= 1336) {\r\n            return maincontainerStyleMobileAndTablet;\r\n        }\r\n        else {\r\n            return maincontainerStyle;\r\n        }\r\n    }\r\n\r\n    const SetAlgorithm = (text) => {\r\n        setAlgorithm(text);\r\n    }\r\n\r\n    return (\r\n        <div style={DeviceVersion()}>\r\n            <div className={getTheme === Themes[1].color ? cardTheme.dark : getTheme === Themes[0].color ? cardTheme.light : cardTheme.blue}>\r\n                <div className=\"card-header h2\">Encryption/Encoding Type:\r\n                    <div className=\"dropdown dropstart\" style={dropdownStyle}>\r\n                        <button className=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton1\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                            {getAlgorithm}\r\n                        </button>\r\n                        <ul className=\"dropdown-menu dropdown-menu-dark\" aria-labelledby=\"dropdownMenuButton1\">\r\n                            {\r\n                                Algorithms.map((algorithm) => (\r\n                                    <li key={algorithm.id}><button onClick={() => SetAlgorithm(algorithm.name)} className=\"dropdown-item\">{algorithm.name}</button></li>    \r\n                                ))                     \r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <TextField buttonText=\"Encode\" getTheme={getTheme} Themes={Themes} getAlgorithm={getAlgorithm}/>\r\n                    <TextField buttonText=\"Decode\" getTheme={getTheme} Themes={Themes} getAlgorithm={getAlgorithm}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst dropdownStyle = {\r\n    float: 'right',\r\n}\r\n\r\nconst maincontainerStyle = {\r\n    width: '50%',\r\n    margin: 'auto',\r\n    marginTop: '10px',\r\n}\r\n\r\nconst maincontainerStyleMobileAndTablet = {\r\n    width: '98%',\r\n    margin: 'auto',\r\n    marginTop: '10px',\r\n}\r\n\r\nconst cardTheme = {\r\n    dark: 'card text-white bg-dark',\r\n    light: 'card text-dark bg-light',\r\n    blue: 'card text-white bg-primary',\r\n}","import './App.css';\nimport React, { useState } from 'react';\nimport Header from './components/Header';\nimport MainCard from './components/MainCard';\n\nconst THEMES = [ //All Themes Here\n  {\n      id: 1,\n      color: 'light'\n  },\n  {\n      id: 2,\n      color: 'dark'\n  },\n  {\n      id: 3,\n      color: 'blue'\n  }\n]\n\nconst Algorithms = [ //All Encoding/Algorithms Here\n  {\n    id: 1,\n    name: 'base64'\n  },\n  {\n    id: 2,\n    name: 'md5'\n  },\n  {\n    id: 3,\n    name: 'sha1'\n  },\n  {\n    id: 4,\n    name: 'sha256'\n  },\n  {\n    id: 5,\n    name: 'aes'\n  },\n  {\n    id: 6,\n    name: 'des'\n  },\n  {\n    id: 7,\n    name: 'rabbit'\n  }\n]\n\nfunction App() {\n\n  const [theme, setTheme] = useState(THEMES[1].color) //Theme State\n  const [algorithm, setAlgorithm] = useState(Algorithms[0].name)\n  document.body.style.backgroundColor = (theme === THEMES[1].color || theme === THEMES[2].color ) ? '#161a1d' : 'white'\n\n  return (\n    <>\n    <Header Title=\"My Crypto\" Themes={THEMES} dropDownBtnText={theme} getTheme={theme} setTheme={setTheme} />\n    <MainCard getTheme={theme} Themes={THEMES} Algorithms={Algorithms} getAlgorithm={algorithm} setAlgorithm={setAlgorithm} />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}